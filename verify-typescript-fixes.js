#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

console.log('üîç V√©rification des corrections TypeScript...\n');

// Fonction pour v√©rifier si un fichier existe
function checkFile(filePath, description) {
  if (fs.existsSync(filePath)) {
    console.log(`‚úÖ ${description}`);
    return true;
  } else {
    console.log(`‚ùå ${description} (fichier manquant)`);
    return false;
  }
}

// Fonction pour v√©rifier si un fichier est supprim√©
function checkFileDeleted(filePath, description) {
  if (!fs.existsSync(filePath)) {
    console.log(`‚úÖ ${description} (correctement supprim√©)`);
    return true;
  } else {
    console.log(`‚ùå ${description} (devrait √™tre supprim√©)`);
    return false;
  }
}

// Fonction pour v√©rifier le contenu d'un fichier
function checkFileContent(filePath, searchText, description) {
  if (fs.existsSync(filePath)) {
    const content = fs.readFileSync(filePath, 'utf8');
    if (content.includes(searchText)) {
      console.log(`‚úÖ ${description}`);
      return true;
    } else {
      console.log(`‚ùå ${description} (contenu manquant)`);
      return false;
    }
  } else {
    console.log(`‚ùå ${description} (fichier manquant)`);
    return false;
  }
}

let allGood = true;

// V√©rifications des fichiers supprim√©s
console.log('üóëÔ∏è  V√©rification des fichiers supprim√©s...');
allGood &= checkFileDeleted('web-app/src/data/repositories/demoAwareRepositories.ts', 'demoAwareRepositories.ts');
allGood &= checkFileDeleted('web-app/src/data/api/clientFactory.ts', 'clientFactory.ts');

// V√©rifications des repositories modifi√©s
console.log('\nüìã V√©rification des repositories modifi√©s...');
allGood &= checkFile('web-app/src/data/repositories/authRepository.ts', 'authRepository.ts existe');
allGood &= checkFile('web-app/src/data/repositories/groupRepository.ts', 'groupRepository.ts existe');
allGood &= checkFile('web-app/src/data/repositories/taskRepository.ts', 'taskRepository.ts existe');

// V√©rifications du contenu (d√©tection mode d√©mo)
console.log('\nüîß V√©rification de l\'int√©gration du mode d√©mo...');
allGood &= checkFileContent(
  'web-app/src/data/repositories/authRepository.ts',
  'IS_DEMO_MODE',
  'authRepository.ts utilise IS_DEMO_MODE'
);
allGood &= checkFileContent(
  'web-app/src/data/repositories/authRepository.ts',
  'mockApiClient.login',
  'authRepository.ts utilise mockApiClient'
);

allGood &= checkFileContent(
  'web-app/src/data/repositories/groupRepository.ts',
  'IS_DEMO_MODE',
  'groupRepository.ts utilise IS_DEMO_MODE'
);
allGood &= checkFileContent(
  'web-app/src/data/repositories/groupRepository.ts',
  'mockApiClient.getAllGroups',
  'groupRepository.ts utilise mockApiClient'
);

allGood &= checkFileContent(
  'web-app/src/data/repositories/taskRepository.ts',
  'IS_DEMO_MODE',
  'taskRepository.ts utilise IS_DEMO_MODE'
);
allGood &= checkFileContent(
  'web-app/src/data/repositories/taskRepository.ts',
  'mockApiClient.getAllTasks',
  'taskRepository.ts utilise mockApiClient'
);

// V√©rification des mocks
console.log('\nüé≠ V√©rification des mocks...');
allGood &= checkFile('web-app/src/data/mocks/mockData.ts', 'Donn√©es mock√©es');
allGood &= checkFile('web-app/src/data/mocks/mockApiClient.ts', 'Client API mock√©');

console.log('\n' + '='.repeat(50));

if (allGood) {
  console.log('üéâ Toutes les corrections TypeScript sont correctes !');
  console.log('');
  console.log('‚úÖ Fichiers probl√©matiques supprim√©s');
  console.log('‚úÖ Repositories modifi√©s avec d√©tection auto du mode d√©mo');
  console.log('‚úÖ Int√©gration mockApiClient fonctionnelle');
  console.log('‚úÖ Le build devrait maintenant r√©ussir');
  console.log('');
  console.log('üöÄ Prochaines √©tapes :');
  console.log('1. Lancez : ./fix-typescript-errors.sh');
  console.log('2. V√©rifiez le build : https://github.com/DrivoireFR/Together/actions');
  console.log('3. Testez la d√©mo : https://drivoirefr.github.io/Together/');
  console.log('');
  console.log('üîê Identifiants : demo@example.com / demo123');
  console.log('');
  console.log('üìã Architecture des repositories :');
  console.log('   if (IS_DEMO_MODE) { return mockApiClient.method() }');
  console.log('   else { return apiClient.method() }');
} else {
  console.log('‚ö†Ô∏è  Certaines corrections manquent ou sont incorrectes');
  console.log('üí° V√©rifiez les √©l√©ments marqu√©s ‚ùå ci-dessus');
  console.log('');
  console.log('üîß R√©solution :');
  console.log('1. Supprimez demoAwareRepositories.ts');
  console.log('2. Modifiez les repositories existants avec IS_DEMO_MODE');
  console.log('3. Importez mockApiClient dans chaque repository');
}

console.log('\nüõ†Ô∏è  Test en local : cd web-app && npm run build');