// Script de test pour les tags li√©s aux groupes
const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api';

// Variables pour stocker les donn√©es de test
let authToken = '';
let userId = null;
let groupId = null;
let tagId = null;
let taskId = null;

async function testTagsGroups() {
  console.log('üß™ Test des Tags li√©s aux Groupes\n');

  try {
    // 1. Test de la route de sant√©
    console.log('1. Test de la route de sant√©...');
    const healthResponse = await axios.get(`${BASE_URL}/health`);
    console.log('‚úÖ API op√©rationnelle:', healthResponse.data.message);

    // 2. Inscription d'un utilisateur de test
    console.log('\n2. Inscription d\'un utilisateur de test...');
    const registerResponse = await axios.post(`${BASE_URL}/auth/register`, {
      nom: 'Test',
      prenom: 'User',
      pseudo: 'testuser_tags',
      email: 'test.tags@example.com',
      password: 'password123'
    });
    
    authToken = registerResponse.data.token;
    userId = registerResponse.data.user.id;
    console.log('‚úÖ Utilisateur cr√©√© avec ID:', userId);

    // 3. Cr√©ation d'un groupe
    console.log('\n3. Cr√©ation d\'un groupe...');
    const groupResponse = await axios.post(`${BASE_URL}/groups`, {
      nom: 'Groupe Test Tags'
    }, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    groupId = groupResponse.data.group.id;
    console.log('‚úÖ Groupe cr√©√© avec ID:', groupId);

    // 4. Rejoindre le groupe cr√©√©
    console.log('\n4. Rejoindre le groupe...');
    await axios.post(`${BASE_URL}/groups/${groupId}/join`, {}, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚úÖ Groupe rejoint avec succ√®s');

    // 5. Cr√©ation d'un tag dans le groupe
    console.log('\n5. Cr√©ation d\'un tag dans le groupe...');
    const tagResponse = await axios.post(`${BASE_URL}/tags`, {
      label: 'Urgent',
      color: '#FF0000',
      groupId: groupId
    }, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    tagId = tagResponse.data.tag.id;
    console.log('‚úÖ Tag cr√©√© avec ID:', tagId);

    // 6. R√©cup√©ration des tags du groupe
    console.log('\n6. R√©cup√©ration des tags du groupe...');
    const groupTagsResponse = await axios.get(`${BASE_URL}/tags/group/${groupId}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚úÖ Tags du groupe r√©cup√©r√©s:', groupTagsResponse.data.tags.length, 'tag(s)');

    // 7. Cr√©ation d'une t√¢che avec le tag
    console.log('\n7. Cr√©ation d\'une t√¢che avec le tag...');
    const taskResponse = await axios.post(`${BASE_URL}/tasks`, {
      label: 'T√¢che de test',
      frequenceEstimee: 1,
      uniteFrequence: 'semaine',
      groupId: groupId,
      tagId: tagId
    }, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    
    taskId = taskResponse.data.task.id;
    console.log('‚úÖ T√¢che cr√©√©e avec ID:', taskId);

    // 8. R√©cup√©ration du groupe avec ses tags
    console.log('\n8. R√©cup√©ration du groupe avec ses tags...');
    const groupDetailsResponse = await axios.get(`${BASE_URL}/groups/${groupId}`, {
      headers: { Authorization: `Bearer ${authToken}` }
    });
    console.log('‚úÖ Groupe r√©cup√©r√© avec', groupDetailsResponse.data.group.tags.length, 'tag(s)');

    // 9. Test d'erreur : tentative de cr√©ation d'un tag sans √™tre membre
    console.log('\n9. Test d\'erreur : cr√©ation d\'un second utilisateur...');
    const user2Response = await axios.post(`${BASE_URL}/auth/register`, {
      nom: 'Test2',
      prenom: 'User2',
      pseudo: 'testuser2_tags',
      email: 'test2.tags@example.com',
      password: 'password123'
    });
    
    const user2Token = user2Response.data.token;
    
    try {
      await axios.post(`${BASE_URL}/tags`, {
        label: 'Tag non autoris√©',
        color: '#00FF00',
        groupId: groupId
      }, {
        headers: { Authorization: `Bearer ${user2Token}` }
      });
      console.log('‚ùå L\'erreur attendue n\'a pas √©t√© lev√©e');
    } catch (error) {
      if (error.response && error.response.status === 403) {
        console.log('‚úÖ Erreur 403 correctement lev√©e pour utilisateur non membre');
      } else {
        console.log('‚ùå Erreur inattendue:', error.response?.data || error.message);
      }
    }

    console.log('\nüéâ Tous les tests sont pass√©s avec succ√®s !');

  } catch (error) {
    console.error('\n‚ùå Erreur lors des tests:', error.response?.data || error.message);
    if (error.response?.data?.errors) {
      console.error('D√©tails:', error.response.data.errors);
    }
  }
}

// Ex√©cuter les tests
testTagsGroups().catch(console.error);