import { AppDataSource } from '../config/database';
import { Group } from '../entities/Group';
import { Task, FrequencyUnit } from '../entities/Task';
import { Tag } from '../entities/Tag';
import { User } from '../entities/User';

interface TaskData {
    label: string;
    iconUrl?: string;
    frequenceEstimee: number;
    uniteFrequence: FrequencyUnit;
    points: number;
    tagLabel: string;
}

const defaultTasksData: TaskData[] = [
    {
        label: 'Passer l\'aspirateur',
        iconUrl: 'üßπ',
        frequenceEstimee: 2,
        uniteFrequence: FrequencyUnit.SEMAINE,
        points: 10,
        tagLabel: 'M√©nage'
    },
    {
        label: 'Faire la vaisselle',
        iconUrl: 'üçΩÔ∏è',
        frequenceEstimee: 1,
        uniteFrequence: FrequencyUnit.JOUR,
        points: 5,
        tagLabel: 'M√©nage'
    },
    {
        label: 'Nettoyer la salle de bain',
        iconUrl: 'üõÅ',
        frequenceEstimee: 1,
        uniteFrequence: FrequencyUnit.SEMAINE,
        points: 15,
        tagLabel: 'M√©nage'
    },
    {
        label: 'Nourrir le chat',
        iconUrl: 'üê±',
        frequenceEstimee: 2,
        uniteFrequence: FrequencyUnit.JOUR,
        points: 3,
        tagLabel: 'Animal de compagnie'
    },
    {
        label: 'Sortir le chien',
        iconUrl: 'üêï',
        frequenceEstimee: 3,
        uniteFrequence: FrequencyUnit.JOUR,
        points: 5,
        tagLabel: 'Animal de compagnie'
    },
    {
        label: 'Pr√©parer le d√Æner',
        iconUrl: 'üç≥',
        frequenceEstimee: 1,
        uniteFrequence: FrequencyUnit.JOUR,
        points: 8,
        tagLabel: 'Cuisine'
    },
    {
        label: 'Faire les courses',
        iconUrl: 'üõí',
        frequenceEstimee: 2,
        uniteFrequence: FrequencyUnit.SEMAINE,
        points: 12,
        tagLabel: 'Courses'
    },
    {
        label: 'Faire le m√©nage des placards',
        iconUrl: 'üì¶',
        frequenceEstimee: 1,
        uniteFrequence: FrequencyUnit.MOIS,
        points: 20,
        tagLabel: 'M√©nage'
    }
];

export class GroupAndTasksSeeder {
    public static async run(testUser: User): Promise<void> {
        const groupRepository = AppDataSource.getRepository(Group);
        const taskRepository = AppDataSource.getRepository(Task);
        const tagRepository = AppDataSource.getRepository(Tag);

        console.log('üè† Cr√©ation du groupe de test et des t√¢ches...');

        // V√©rifier si le groupe existe d√©j√†
        let existingGroup = await groupRepository.findOne({
            where: { nom: 'Maison Test' },
            relations: ['users']
        });

        if (!existingGroup) {
            // Cr√©er le groupe de test
            const group = groupRepository.create({
                nom: 'Maison Test',
                users: [testUser]
            });
            existingGroup = await groupRepository.save(group);
            console.log(`‚úÖ Groupe cr√©√©: ${group.nom}`);
        } else {
            // V√©rifier si l'utilisateur est d√©j√† dans le groupe
            const userInGroup = existingGroup.users.some(user => user.id === testUser.id);
            if (!userInGroup) {
                existingGroup.users.push(testUser);
                await groupRepository.save(existingGroup);
                console.log(`‚úÖ Utilisateur ajout√© au groupe existant: ${existingGroup.nom}`);
            } else {
                console.log(`‚ÑπÔ∏è  Groupe existant: ${existingGroup.nom}`);
            }
        }

        // Cr√©er les t√¢ches
        for (const taskData of defaultTasksData) {
            // V√©rifier si la t√¢che existe d√©j√†
            const existingTask = await taskRepository.findOne({
                where: { label: taskData.label, group: { id: existingGroup.id } }
            });

            if (!existingTask) {
                // Trouver le tag correspondant
                const tag = await tagRepository.findOne({
                    where: { label: taskData.tagLabel, isDefault: true }
                });

                if (!tag) {
                    console.log(`‚ö†Ô∏è  Tag non trouv√©: ${taskData.tagLabel}, t√¢che "${taskData.label}" cr√©√©e sans tag`);
                }

                // Cr√©er la t√¢che
                const task = taskRepository.create({
                    label: taskData.label,
                    iconUrl: taskData.iconUrl,
                    frequenceEstimee: taskData.frequenceEstimee,
                    uniteFrequence: taskData.uniteFrequence,
                    points: taskData.points,
                    group: existingGroup,
                    tag: tag || undefined
                });

                await taskRepository.save(task);
                console.log(`‚úÖ T√¢che cr√©√©e: ${task.label} (${task.points} points, ${task.frequenceEstimee} ${task.uniteFrequence})`);
            } else {
                console.log(`‚ÑπÔ∏è  T√¢che existante: ${existingTask.label}`);
            }
        }

        console.log('üéâ Groupe et t√¢ches cr√©√©s avec succ√®s !');
    }
} 